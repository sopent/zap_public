from fastapi import FastAPI

description = """Использование имеющихся сервисов 1С:
<ul>
     <li>1. Загрузка прайсов от поставщиков. Можно оставить парсинг прайсов поставщикам в виде программы на Delphi, однако нужно формировать текстовые файлы и отдавать их сайту для загрузки.</li>
     <li>2. Отправка прайсов клиентам. Можно оставить в 1С, пока это устраивает по функционалу и производительности.</li>
     <li>3. Парсинг заказов от клиентов. Можно оставить в 1С, но необходимо передавать данные на сайт по апи (/order/add).</li>
     <li>4. Отправка заказов поставщикам. Можно сделать там, где удобнее дорабатывать и расширять (/order/to-supplier).</li>
     <li>5. Парсинг инвойсов. В будущем должен быть автоматический, f1pro такого не предоставляет, однако временно оставляем в 1С, передаем данные на сайт (/order/supplier-invoice)</li>
     <li>A. Дополнительный вопрос по документам. Их может генерировать 1С и отдавать сайту через веб-сервис или ssh. При этом нужно от 1С получать состав возвратного документа (/client/return-doc).</li>
</ul>     
     """

app = FastAPI(description=description)

@app.get("/")
async def index():
    return {"message": "Hello World"}


# пункт 1
@app.get("/user/get-new", summary="передача в 1с новых пользователей, пакетно")
async def user_get_new():
    """1c обращается к этому апи, что бы забрать новых пользователей
        (client.data_fetched_by_1c=DATA_NEW, выставляется DATA_FETCHED)"""
    return {}


@app.get("/supplier/get-new", summary="передача в 1с новых поставщиков, пакетно")
async def supplier_get_new():
    """1c обращается к этому апи, что бы забрать новых поставщиков, необходима новая колонка в базе,
        либо 1с передает диапазон дат и фильтрация по date_changed
        (supplier.data_fetched_by_1c=DATA_NEW, выставляется DATA_FETCHED)"""
    return {}


# пункт 2
@app.get("/user/get-updated", summary="передача в 1с обновлений данных по пользователям, пакетно")
async def user_get_updated():
    """1c обращается к этому апи, что бы забрать обновленные данные пользователей
        (client.data_fetched_by_1c=DATA_UPDATED, выставляется DATA_FETCHED)"""
    return {}


@app.get("/supplier/get-updated", summary="передача в 1с обновления данных по поставщикам, пакетно")
async def supplier_get_updated():
    """1c обращается к этому апи, что бы забрать обновленные данные поставщиков, необходима новая колонка в базе
        (supplier.data_fetched_by_1c=DATA_UPDATED, выставляется DATA_FETCHED)"""
    return {}


# пункт 3
@app.get("/order/get-new", summary="передача заказов в 1С")
async def order_get_new():
    """Т.к. есть заказы через сайт, а не только почтовые, это апи обязательно нужно, что бы передать в 1С состав этих заказов"""
    return {}


@app.post("/order/add", summary="передача заказов на сайт из 1С")
async def order_add():
    """Если почтовые заказы будет парсить 1С, то она должна отдать результат на сайт, что бы отображать данные клиентам
    и заполнять supplier_invoice"""
    return {}


# пункт 4
@app.post("/order/to-supplier", summary="заказы поставщикам")
async def order_to_supplier():
    """Если заказы поставщикам отправляет 1С, то этот метод принимает данные. Если отправлять будет сайт,
    то он отдает данные для 1С. Нужно выбрать."""
    return {}


@app.post("/order/supplier-invoice", summary="загрузка заказа поставщику из 1С на сайт")
async def order_supplier_invoice():
    """Если инвойсы загружаются через 1С, то через этот сервис передается состав документа для заполнения supplier_invoice"""
    return {}


# пункт 5, 6
@app.post("/order/change-status", summary="отправка статусов пришло, выдано, возврат, отказ")
async def order_change_status_by_key():
    """Отправка статусов от склада на сайт - пришло, выдано, возврат, отказ поставщика. Отказ поставщика отправляется,
    например, в случае, если с поставщиком договоренность - не привёз на следующий день, уже не привезёт.
    Возврат в этом сервисе необязательно, можно запретить этот статус тут, т.к. есть /client/return-doc"""
    return {}


# пункт 7
@app.post("/order/change-price", summary="изменение цены заказа")
async def order_change_price():
    """В случае изменения цены в 1С"""
    return {}


# пункт 8
@app.get("/order/reject", summary="детали, уже не нужные клиентам")
async def order_reject():
    """Список деталей, которые склад должен сразу отправить на возврат поставщику, не собирая их клиентам.
    Не приоритетно."""
    return {}


# пункт 9
@app.get("/client/return-doc", summary="состав документа возврата клиенту")
async def client_return_doc():
    """состав возвратных документов клиента, для заполнения order_status.invoice_return_number"""
    return {}


# пункт 10
@app.get("/order/reject-approved", summary="одобрение возвратов")
async def client_return_doc():
    """Синхронизация данных об одобренных возвратах, направление передачи данных зависит от выбранной схемы работы с возвратами"""
    return {}
